teams = scs[[1]]$team
teams
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
num.scen = 4
must.scen = 1:2
scs = import.stage1.strats(in.dir, num.scen)
teams = scs[[1]]$team
ignore.teams = "The Overseer"
if (!file.exists(out.dir))
dir.create(out.dir)
setwd(out.dir)
scs = write.strat.code.for.all.scen(scs,teams=teams)
num.teams = length(teams)
as = assign.answer.strats( teams = teams, num.scen=num.scen, num.answer=num.answer, ignore.teams = ignore.teams)
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
in.dir = "D:/lehre/cooperation seminar/task1strat"
out.dir = "D:/lehre/cooperation seminar/task1_stage2_template"
tmp.file = "D:/libraries/StratTourn/StratTourn/coop1_answerstrats_vorlage.template.Rmd"
num.scen = 4
must.scen = 1:2
scs = import.stage1.strats(in.dir, num.scen)
teams = scs[[1]]$team
ignore.teams = "The Overseer"
if (!file.exists(out.dir))
dir.create(out.dir)
setwd(out.dir)
scs = write.strat.code.for.all.scen(scs,teams=teams)
num.teams = length(teams)
as = assign.answer.strats( teams = teams, num.scen=num.scen, num.answer=num.answer, ignore.teams = ignore.teams)
restore.point("assign.answer.strats")
used.teams = setdiff(teams, ignore.teams)
used.teams
num.teams = length(used.teams)
num.teams
offsets = rep(seq(1,num.teams-num.answer, by=offset.step), length.out=num.scen)
li = lapply(1:num.teams, function(t) {
li = lapply(1:num.scen, function(scen){
(team+(1:num.answer)+offsets[scen]-2) %% num.teams +1
})
names(li) = paste0("scen",1:num.scen)
li
})
offsets = rep(seq(1,num.teams-num.answer, by=offset.step), length.out=num.scen)
li = lapply(1:num.teams, function(team) {
li = lapply(1:num.scen, function(scen){
(team+(1:num.answer)+offsets[scen]-2) %% num.teams +1
})
names(li) = paste0("scen",1:num.scen)
li
})
names(li) = used.teams
li
as = vector("list", length(teams))
names(as) = teams
as[used.teams] = li
as
for (t in ignore.teams) {
as[[t]] = as[[used.teams[1]]]
}
as
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
restore.point("assign.answer.strats")
used.teams = setdiff(teams, ignore.teams)
num.teams = length(used.teams)
offsets = rep(seq(1,num.teams-num.answer, by=offset.step), length.out=num.scen)
li = lapply(1:num.teams, function(team) {
li = lapply(1:num.scen, function(scen){
used.teams[(team+(1:num.answer)+offsets[scen]-2) %% num.teams +1]
})
names(li) = paste0("scen",1:num.scen)
li
})
names(li) = used.teams
as = vector("list", length(teams))
names(as) = teams
as[used.teams] = li
for (t in ignore.teams) {
as[[t]] = as[[used.teams[1]]]
}
as
scs[[scen]]$strat.name
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
strats = scs[[scen]]$strat.name
names(strats) = teams
strats
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
in.dir = "D:/lehre/cooperation seminar/task1strat"
out.dir = "D:/lehre/cooperation seminar/task1_stage2_template"
tmp.file = "D:/libraries/StratTourn/StratTourn/coop1_answerstrats_vorlage.template.Rmd"
num.scen = 4
must.scen = 1:2
scs = import.stage1.strats(in.dir, num.scen)
teams = scs[[1]]$team
ignore.teams = "The Overseer"
if (!file.exists(out.dir))
dir.create(out.dir)
setwd(out.dir)
scs = write.strat.code.for.all.scen(scs,teams=teams)
num.teams = length(teams)
as = assign.answer.strats( teams = teams, num.scen=num.scen, num.answer=num.answer, ignore.teams = ignore.teams)
t = 1
for (t in 1:num.teams) {
txt = render.answer.template(tmp.file,t,scs,as, teams, must.scen)
cat(txt)
team.dir = paste0(out.dir,"/Team ", teams[t])
if (!file.exists(team.dir))
dir.create(team.dir)
setwd(team.dir)
file = paste("answer strats ", teams[t], ".Rmd")
writeLines(txt,file)
for (scen in 1:num.scen) {
file = paste0("strats_scen",scen,".r")
writeLines(scs[[scen]]$all.code, file)
}
setwd(out.dir)
zipfile = paste0("Team ", teams[t],".zip")
zip(zipfile, files =  paste0("./Team ", teams[t]))
}
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
source('D:/libraries/StratTourn/StratTourn/R/make_answer_rmd.r')
in.dir = "D:/lehre/cooperation seminar/task1strat"
out.dir = "D:/lehre/cooperation seminar/task1_stage2_template"
tmp.file = "D:/libraries/StratTourn/StratTourn/coop1_answerstrats_vorlage.template.Rmd"
num.scen = 4
must.scen = 1:2
scs = import.stage1.strats(in.dir, num.scen)
teams = scs[[1]]$team
ignore.teams = "The Overseer"
if (!file.exists(out.dir))
dir.create(out.dir)
setwd(out.dir)
scs = write.strat.code.for.all.scen(scs,teams=teams)
num.teams = length(teams)
as = assign.answer.strats( teams = teams, num.scen=num.scen, num.answer=num.answer, ignore.teams = ignore.teams)
t = 1
for (t in 1:num.teams) {
txt = render.answer.template(tmp.file,t,scs,as, teams, must.scen)
cat(txt)
team.dir = paste0(out.dir,"/Team ", teams[t])
if (!file.exists(team.dir))
dir.create(team.dir)
setwd(team.dir)
file = paste("answer strats ", teams[t], ".Rmd")
writeLines(txt,file)
for (scen in 1:num.scen) {
file = paste0("strats_scen",scen,".r")
writeLines(scs[[scen]]$all.code, file)
}
setwd(out.dir)
zipfile = paste0("Team ", teams[t],".zip")
zip(zipfile, files =  paste0("./Team ", teams[t]))
}
source('D:/libraries/StratTourn/coop1_skstrat.r')
source('D:/libraries/StratTourn/coop1_skstrat.r')
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
head(sim)
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
plot(sim)
library(compiler)
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
library(StratTourn)
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
plot(sim)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
plot(sim)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=50, delta=0.95, sim=sim,game=game
)
plot(sim)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=150, delta=0.95, sim=sim,game=game
)
plot(sim)
rank_prelim_coop1 <- read.csv("D:/lehre/cooperation seminar/rank_prelim_coop1.csv")
View(rank_prelim_coop1)
k = 1
runif(1)
k = 0.5
floor(k)
floor(k)
k = 1.3
floor(k)
k-floor(k)
k
runif(1)
( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
k + ( runif(1) <(k-floor(k)) )
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <= k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
game = make.pd.game(err.D.prob=0.15)
net.nice.k(obs = NULL, i=1,t=2, fr=4)
f = function(x,...) {x}
f (x=5,a=3)
f = function(x) {x}
f (x=5,a=3)
game = make.pd.game(err.D.prob=0.15)
sim = NULL
library(StratTourn)
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=50, delta=0.95, sim=sim,game=game
)
plot(sim)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <= k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
restore.point("dhfhd")
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <= k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
restore.point("dhfhd")
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
message("k")
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
message(k)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
message(obs)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
message(obs)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game
)
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
library(StratTourn)
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
traceback()
restore.point("study.strats")
is.storing
is.storing()
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
library(StratTourn)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
message(obs)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
restore.point("net.nice.k")
message(obs)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
restore.point("net.nice.k")
restore.point("study.strats")
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
source('D:/libraries/StratTourn/StratTourn/R/study_strats.r')
net.nice.k = function(obs,i,t,net.nice=0,k=0,...) {
restore.point("net.nice.k")
message(obs)
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <=  k + (runif(1) <(k-floor(k))) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice.k), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
restore.point("net.nice.k")
net.nice = function(obs,i,t,net.nice=0,k=0,...) {
# Wie oft habe ich haeufiger C gespielt als mein Partner
net.nice = net.nice + (obs$a[i]=="C") - (obs$a[3-i]=="C")
if (net.nice <= k + ( runif(1) <(k-floor(k)) ) ) {
return(nlist("C",net.nice))
} else {
return(nlist("D",net.nice))
}
}
# A noisy PD game
set.storing(TRUE)
game = make.pd.game(err.D.prob=0.15)
library(StratTourn)
sim = NULL
# Study performance of tit.for.tat against variants of mix
sim = study.strats.and.answers(
strats = nlist(net.nice), #answers=nlist(net.nice.k),
strat.par = list(k=c(0,1,2)),
#answer.par=list(probC = seq(0,1,length=5)),
R=5, delta=0.95, sim=sim,game=game, disable.restore.point=FALSE
)
