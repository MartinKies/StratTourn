})
ret
ret = rbindlist(ret)
ret = lapply(unique(sagg$strat), function(strat) {
instability = pmax(max(agg$u.mean[agg$strat==strat])-sagg$u.mean[sagg$strat==strat],0)
efficiency = sagg$u.mean[sagg$strat==strat]
score = NA
if (!is.null(score.fun)) {
score = eval(parse(text=score.fun))
}
nlist(instability,efficiency, score)
})
ret = rbindlist(ret)
ret
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.3)
delta = 0.95
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 5
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")+
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 5
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
par = list(k = seq(-2,2,length=11))
R = 5
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
par = list(k = seq(-2,2,length=11))
R = 5
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
R = 20
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
qplot(k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
qplot(x="k", u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
qplot(x=k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
R = 100
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
agg = sim$agg
qplot(x=k, u.mean, data=agg, facets=~strat) + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), data=agg, stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
ggplot(agg) + aes_string(x=par.names[1], y="u.mean") + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
qplot(data=agg) + aes_string(x=par.names[1], y="u.mean") + facet_grid(~strat) +
geom_smooth(aes(ymin = ci.lower, ymax = ci.upper), stat="identity")+
geom_hline(data = sim$sagg, aes(yintercept = u.mean), colour="red")+
geom_hline(data = sim$sagg, aes(yintercept = ci.lower), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = ci.upper), colour="red",linetype="dashed")+
geom_hline(data = sim$sagg, aes(yintercept = score), colour="green")
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.15)
delta = 0.95
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.15)
delta = 0.95
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
plot(sim)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice0, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = study.best.answer.par(nlist(net.nice1, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
simulation.study
draw.seed
simulation.study
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
c(5,NULL)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 2
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
sim = study.best.answer.par(nlist(net.nice.k.weight), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice0), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 2
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice0), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
sim = NULL
par = list(k = seq(-2,2,length=11))
R = 2
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice0), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice0), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=11))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice.k.weight, net.nice0, net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=6))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=6))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = NULL
par = list(k = seq(-2,2,length=6))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=6))
R = 10
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=6))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice1), nlist(net.nice.k),par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
par = list(k = seq(-2,2,length=6))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(net.nice0,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
nnkw = function(...) {
net.nice.k.weight(..., kmax=1,k0=1, reduce.factor = 1/3)
}
sim = NULL
nnkw = function(...) {
net.nice.k.weight(..., kmax=1,k0=1, reduce.factor = 1/3)
}
par = list(k = seq(-2,2,length=6))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
sim = NULL
par = list(k = seq(-2,2,length=6))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par
par = list(k = seq(-2,2,length=5))
par
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
nnkw = function(...) {
net.nice.k.weight(..., kmax=1,k0=0, reduce.factor = 1/3)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
game = make.pd.game(err.D.prob=0.3)
delta = 0.95
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/3)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.3)
delta = 0.99
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/3)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.best.answer.par(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
sim
source('D:/libraries/sktools/sktools/R/EmpIOUtils.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
plot(gplot)
# Load R libraries
library(sktools)
# Load and analyize production data
setwd("D:/lehre/energieoekonomik/data/")
df <- read.csv("Stromproduktion nach Typ DE.csv",row.names=1,header=FALSE)
# Clean and adapt data
# Transpose data.frame, typically time is stored in rows. Also, column names should not be numbers
df = as.data.frame(t(df))
# Remove "X" from the years
colnames(df)[1] = "year"
# Remove colnames
rownames(df)  = NULL
# In our setting missing data means roughly zero production
df[is.na(df)] = 0
# Plot production of Nuclear Energy
plot(df$year,df$Kernenergie,col="orange",type="l",main="Production of Nuclear Energy",ylab="TWh",xlab="Year")
# Generate stacked barplot for all energy types
types = colnames(df[,-1])
colors  = c("black","brown","darkblue","grey","orange","white","blue","green","yellow")
# store data in variable prod
prod = df
# load and adapt capacity data
# ----------------------------------------------------
setwd("D:/lehre/energieoekonomik/data/")
# First column is taken as row.names
df <- read.csv("Stromerzeugungskapazitaeten nach Typ DE.csv",row.names=1,header=FALSE, sep=",", dec=".")
# Transpose data.frame, typically time is stored in rows. Also, column names should not be numbers
df = as.data.frame(t(df))
# Remove "X" from the years
colnames(df)[1] = "year"
rownames(df)  = NULL
cap = df
# Merge both data sets
# Transform from "wide" into "long" format
library(reshape2)
prod.long <- melt(prod,
id.vars=c("year"),
variable.name="type",
value.name="production"
)
cap.long <- melt(cap,
id.vars=c("year"),
variable.name="type",
value.name="capacity"
)
# Merge the two data frames
df = merge(prod.long, cap.long, c("type","year"),all=TRUE)
unique(df$type)
df = automatic.type.conversion(df)
# Analyse MotionCharts
# Generate average production per h in GW
df$prod.per.h = (df$production * 1000 / (365*24))
# Generate and show MotionCharts
library(googleVis)
gplot = gvisMotionChart(df,idvar="type",timevar="year")
plot(gplot)
plot(gplot)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.15)
delta = 0.98
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/3)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 50
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice0), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=1, reduce.factor = 1/5)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 20
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.3)
delta = 0.98
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=1, reduce.factor = 1/5)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 20
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.3)
delta = 0.98
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/5)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 20
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.3)
delta = 0.99
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/5)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 20
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
par = list(k = seq(-2,2,length=5))
R = 20
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
strat = net.nice0
answer = net.nice.k
game = make.pd.game(err.D.prob=0.15)
delta = 0.95
nnkw = function(...) {
net.nice.k.weight(..., kmax=2,k0=0, reduce.factor = 1/5)
}
sim = NULL
par = list(k = seq(-2,2,length=5))
R = 10
set.storing(TRUE)
sim = study.strat.and.answer(nlist(nnkw,net.nice0, net.nice1), nlist(net.nice.k),answer.par=par,R=R, delta=delta, sim=sim,game=game)
plot(sim)
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
100 /15
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
source('D:/libraries/StratTourn/StratTourn/R/find_best_answers.r')
